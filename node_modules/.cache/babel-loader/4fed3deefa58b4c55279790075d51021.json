{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/eleana/Documents/nextTrial/myApp/pages/index.js\";\nimport React from 'react';\nimport DigitalClock from \"../src/DigitalClock\";\nimport axios from \"axios\";\nimport { promises } from 'fs';\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  _createClass(Index, null, [{\n    key: \"getInitialProps\",\n    // next runs the getinitialprops before it calls the constructor\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // return ({\n                //     time: new Date().toISOString()\n                // });\n                // const newPromise = new Promise((resolve,reject) => {\n                //     setInterval(\n                //         () => resolve({\n                //             time: new Date().toISOString()\n                //         }),3000\n                //     );\n                // });\n                // return newPromise;\n                response = axios.get(\"http://localhost:400/speakers\").then(function (response) {\n                  return {\n                    hasErrored: false,\n                    speakerData: response.data\n                  };\n                }).catch(function (error) {\n                  return {\n                    hasErrored: true,\n                    message: error.message\n                  };\n                });\n                return _context.abrupt(\"return\", promises);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps() {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n    _this.state = {\n      time: props.time\n    };\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.interval = setInterval(function () {\n        _this2.tick();\n      }, 1000);\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      this.setState({\n        time: new Date().toISOString()\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //return React.createElement(\"h1\", { }, \"Hello from the function side\" + this.state.time);\n      // return <h1>Hello from the function side!!!: {this.state.time}</h1>;\n      return React.createElement(DigitalClock, {\n        time: this.state.time,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"compentWillUnMount\",\n    value: function compentWillUnMount() {\n      clearInterval(this.interval);\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport default Index;","map":{"version":3,"sources":["/Users/eleana/Documents/nextTrial/myApp/pages/index.js"],"names":["React","DigitalClock","axios","promises","Index","response","get","then","hasErrored","speakerData","data","catch","error","message","props","state","time","interval","setInterval","tick","setState","Date","toISOString","clearInterval","Component"],"mappings":";;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,IAAzB;;IAEMC,K;;;;;;;AAEF;;;;;;;;;;AAEI;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEMC,gBAAAA,Q,GAAWH,KAAK,CAACI,GAAN,CAAU,+BAAV,EACZC,IADY,CAET,UAACF,QAAD,EAAc;AACV,yBAAO;AACHG,oBAAAA,UAAU,EAAE,KADT;AAEHC,oBAAAA,WAAW,EAAEJ,QAAQ,CAACK;AAFnB,mBAAP;AAIH,iBAPQ,EAQfC,KARe,CASb,UAAAC,KAAK,EAAI;AACL,yBAAO;AACHJ,oBAAAA,UAAU,EAAE,IADT;AAEHK,oBAAAA,OAAO,EAACD,KAAK,CAACC;AAFX,mBAAP;AAIH,iBAdY,C;iDAgBVV,Q;;;;;;;;;;;;;;;;;;AAEX,iBAAaW,KAAb,EAAoB;AAAA;;AAAA;;AAChB,+EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAEF,KAAK,CAACE;AADH,KAAb;AAFgB;AAKnB;;;;wCAEmB;AAAA;;AACjB,WAAKC,QAAL,GAAeC,WAAW,CAAC,YAAM;AAC5B,QAAA,MAAI,CAACC,IAAL;AACH,OAFwB,EAEtB,IAFsB,CAA1B;AAGD;;;2BACK;AACH,WAAKC,QAAL,CAAc;AACVJ,QAAAA,IAAI,EAAE,IAAIK,IAAJ,GAAWC,WAAX;AADI,OAAd;AAGH;;;6BAEQ;AACN;AACC;AACA,aAAO,oBAAC,YAAD;AAAc,QAAA,IAAI,EAAE,KAAKP,KAAL,CAAWC,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;;yCAEoB;AACjBO,MAAAA,aAAa,CAAC,KAAKN,QAAN,CAAb;AACH;;;;EA7DejB,KAAK,CAACwB,S;;AAgE1B,eAAepB,KAAf","sourcesContent":["\nimport React from 'react';\n\nimport DigitalClock from \"../src/DigitalClock\";\nimport axios from \"axios\";\nimport { promises } from 'fs';\n\nclass Index extends React.Component{\n\n    // next runs the getinitialprops before it calls the constructor\n    static async getInitialProps() {\n        // return ({\n        //     time: new Date().toISOString()\n        // });\n\n        // const newPromise = new Promise((resolve,reject) => {\n        //     setInterval(\n        //         () => resolve({\n        //             time: new Date().toISOString()\n        //         }),3000\n        //     );\n        // });\n        // return newPromise;\n\n        const response = axios.get(\"http://localhost:400/speakers\")\n            .then(\n                (response) => {\n                    return {\n                        hasErrored: false,\n                        speakerData: response.data,\n                    };\n                }\n        ).catch(\n            error => {\n                return {\n                    hasErrored: true,\n                    message:error.message,\n                }\n            }\n        );\n        return promises;\n }\n    constructor (props) {\n        super(props);\n        this.state = {\n            time: props.time,\n        };\n    }\n\n    componentDidMount() {\n       this.interval= setInterval(() => {\n            this.tick();\n        }, 1000);\n     }\n    tick() {\n        this.setState({\n            time: new Date().toISOString()\n        });\n    }\n\n    render() {\n       //return React.createElement(\"h1\", { }, \"Hello from the function side\" + this.state.time);\n        // return <h1>Hello from the function side!!!: {this.state.time}</h1>;\n        return <DigitalClock time={this.state.time}></DigitalClock>\n    }\n\n    compentWillUnMount() {\n        clearInterval(this.interval)\n    }\n}\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}